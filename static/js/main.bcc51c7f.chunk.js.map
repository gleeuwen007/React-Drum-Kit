{"version":3,"sources":["containers/Key/Key.module.css","containers/Keys/Keys.module.css","assets/sounds/boom.wav","assets/sounds/clap.wav","assets/sounds/hihat.wav","assets/sounds/kick.wav","assets/sounds/openhat.wav","assets/sounds/ride.wav","assets/sounds/snare.wav","assets/sounds/tink.wav","assets/sounds/tom.wav","containers/Key/Key.js","containers/Keys/Keys.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Key","props","removeTransition","e","propertyName","theRef","current","classList","styles","onTransEnd","render","ClassList","keyPlaying","data-key","keyNumber","className","ref","keyLetter","keyName","createRef","this","addEventListener","removeEventListener","Component","Keys","state","soundKeys","keyNote","keyType","sound","boom","isPlaying","clap","hihat","kick","openhat","ride","snare","tink","tom","downHandler","obj","find","String","keyCode","objIndex","findIndex","Audio","play","updatedSoundKeys","setState","soudKeys","soundEnd","theElement","textContent","substring","map","soundKey","key","window","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bcc51c7f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"sound\":\"Key_sound__3UlCK\",\"key\":\"Key_key__3hNbq\",\"playing\":\"Key_playing__YI1Ln\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"keys\":\"Keys_keys__CwteF\"};","module.exports = __webpack_public_path__ + \"static/media/boom.550be808.wav\";","module.exports = __webpack_public_path__ + \"static/media/clap.a6e86dd7.wav\";","module.exports = __webpack_public_path__ + \"static/media/hihat.4ba39e07.wav\";","module.exports = __webpack_public_path__ + \"static/media/kick.4dd58595.wav\";","module.exports = __webpack_public_path__ + \"static/media/openhat.a62db465.wav\";","module.exports = __webpack_public_path__ + \"static/media/ride.b0d70ec5.wav\";","module.exports = __webpack_public_path__ + \"static/media/snare.80c4129b.wav\";","module.exports = __webpack_public_path__ + \"static/media/tink.2a6bb6f5.wav\";","module.exports = __webpack_public_path__ + \"static/media/tom.572ed39d.wav\";","import React, { Component, createRef } from 'react';\n\nimport styles from './Key.module.css';\n\nclass Key extends Component {\n    constructor(props) {\n        super(props)\n        this.theRef = createRef()\n    }\n     \n    removeTransition = (e) => {\n        if(e.propertyName !== 'transform') return;\n        this.theRef.current.classList = styles[\"key\"];\n        this.props.onTransEnd(this.theRef);\n    }\n\n    componentDidMount() {\n        this.theRef.current.addEventListener('transitionend', this.removeTransition);\n    }\n\n    componentWillUnmount() {\n        this.theRef.current.removeEventListener('transitionend', this.removeTransition);\n    }\n    \n    render = () => {\n        let ClassList = styles[\"key\"];\n        \n        if (this.props.keyPlaying) {\n            ClassList += ' ' + styles[\"playing\"];\n        }else {\n            ClassList = styles[\"key\"];\n        }\n          \n        return (\n            <div \n            data-key={this.props.keyNumber} \n            className={ClassList}\n            ref={this.theRef}>\n                <kbd>{this.props.keyLetter}</kbd>\n                <span className={styles[\"sound\"]}>{this.props.keyName}</span>\n            </div>\n        );\n    }\n}\n\nexport default Key;","import React, { Component } from 'react';\n\nimport styles from './Keys.module.css';\nimport Key from '../Key/Key';\n\nimport boom from '../../assets/sounds/boom.wav';\nimport clap from '../../assets/sounds/clap.wav';\nimport hihat from '../../assets/sounds/hihat.wav';\nimport kick from '../../assets/sounds/kick.wav';\nimport openhat from '../../assets/sounds/openhat.wav';\nimport ride from '../../assets/sounds/ride.wav';\nimport snare from '../../assets/sounds/snare.wav';\nimport tink from '../../assets/sounds/tink.wav';\nimport tom from '../../assets/sounds/tom.wav';\n\nclass Keys extends Component {\n    state = {\n        soundKeys: [\n            { keyNumber: '65', keyNote: \"A\", keyType: \"clap\", sound: boom, isPlaying: false },\n            { keyNumber: '83', keyNote: \"S\", keyType: \"hihat\", sound: clap, isPlaying: false },\n            { keyNumber: '68', keyNote: \"D\", keyType: \"kick\", sound: hihat, isPlaying: false },\n            { keyNumber: '70', keyNote: \"F\", keyType: \"openhat\", sound: kick, isPlaying: false },\n            { keyNumber: '71', keyNote: \"G\", keyType: \"boom\", sound: openhat, isPlaying: false },\n            { keyNumber: '72', keyNote: \"H\", keyType: \"ride\", sound: ride, isPlaying: false },\n            { keyNumber: '74', keyNote: \"J\", keyType: \"snare\", sound: snare, isPlaying: false },\n            { keyNumber: '75', keyNote: \"K\", keyType: \"tom\", sound: tink, isPlaying: false },\n            { keyNumber: '76', keyNote: \"L\", keyType: \"tink\", sound: tom, isPlaying: false }\n        ]\n    }\n\n    componentDidMount() {\n        window.addEventListener('keydown', (e) => this.downHandler(e));\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('keydown', (e) => this.downHandler(e));\n    }\n\n    downHandler = (e) => {\n        const obj = this.state.soundKeys.find(obj => obj.keyNumber === String(e.keyCode));\n        const objIndex = this.state.soundKeys.findIndex(obj => obj.keyNumber === String(e.keyCode));\n        if(!obj) return;\n        const sound = new Audio(obj.sound);\n        sound.play();\n\n        const updatedSoundKeys = {\n            ...this.state.soundKeys\n        };\n\n        updatedSoundKeys[objIndex].isPlaying = true;\n        this.setState({soudKeys: updatedSoundKeys});\n    }\n\n    soundEnd = (theElement) => {\n        const objIndex = this.state.soundKeys.findIndex(obj => obj.keyNote === theElement.current.textContent.substring(0,1));\n        \n        const updatedSoundKeys = {\n            ...this.state.soundKeys\n        };\n\n        updatedSoundKeys[objIndex].isPlaying = false;\n        this.setState({soudKeys: updatedSoundKeys});\n    }\n\n    render = () => {\n        return (\n            <div className={styles[\"keys\"]}>\n               {this.state.soundKeys.map(soundKey => (\n                <Key \n                    key={soundKey.keyNumber}\n                    keyLetter={soundKey.keyNote}\n                    keyName={soundKey.keyType}\n                    keyPlaying={soundKey.isPlaying}\n                    onTransEnd={this.soundEnd}\n                />\n            ))}\n            </div>\n        )\n    }\n}\n\nexport default Keys;","import React, { Component, Fragment } from 'react';\n\nimport Keys from './containers/Keys/Keys';\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Keys />\n      </Fragment>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}